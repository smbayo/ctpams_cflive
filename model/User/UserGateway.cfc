<cfcomponent displayname="UserGateway" output="false">	<cfproperty name="dsn" inject="coldbox:datasource:theDSN" />	<cffunction name="init" access="public" output="false" returntype="UserGateway">				<cfreturn this />	</cffunction>		<cffunction name="getByAttributesQuery" access="public" output="false" returntype="query">		<cfargument name="SysUserID" type="numeric" required="false" />		<cfargument name="Name" type="string" required="false" />		<cfargument name="Description" type="string" required="false" />		<cfargument name="Email" type="string" required="false" />		<cfargument name="Password" type="string" required="false" />		<cfargument name="activationGUID" type="string" required="false" />		<cfargument name="activationExpiration" type="date" required="false" />		<cfargument name="isActive" type="boolean" required="false" default="true" />		<cfargument name="programID" type="numeric" required="false" />		<cfargument name="categoryID" type="numeric" required="false" />		<cfargument name="implementingPartner" type="numeric" required="false" />		<cfargument name="orderby" type="string" required="false" />				<cfset var qList = "" />				<cfquery name="qList" datasource="#dsn.getName()#">			SELECT				SysUserID,				Name,				Description,				Email,				Password,				activationGUID,				activationExpiration,				isActive,				programID,				categoryID,				implementingPartner			FROM	SysUser			WHERE	0=0				<cfif structKeyExists(arguments,"SysUserID") and len(arguments.SysUserID)>			AND	SysUserID = <cfqueryparam value="#arguments.SysUserID#" CFSQLType="cf_sql_integer" />		</cfif>		<cfif structKeyExists(arguments,"Name") and len(arguments.Name)>			AND	Name = <cfqueryparam value="#arguments.Name#" CFSQLType="cf_sql_varchar" />		</cfif>		<cfif structKeyExists(arguments,"Description") and len(arguments.Description)>			AND	Description = <cfqueryparam value="#arguments.Description#" CFSQLType="cf_sql_varchar" />		</cfif>		<cfif structKeyExists(arguments,"Email") and len(arguments.Email)>			AND	Email = <cfqueryparam value="#arguments.Email#" CFSQLType="cf_sql_varchar" />		</cfif>		<cfif structKeyExists(arguments,"Password") and len(arguments.Password)>			AND	Password = <cfqueryparam value="#arguments.Password#" CFSQLType="cf_sql_varchar" />		</cfif>		<cfif structKeyExists(arguments,"activationGUID") and len(arguments.activationGUID)>			AND	activationGUID = <cfqueryparam value="#arguments.activationGUID#" CFSQLType="cf_sql_idstamp" />		</cfif>		<cfif structKeyExists(arguments,"activationExpiration") and len(arguments.activationExpiration)>			AND	activationExpiration = <cfqueryparam value="#arguments.activationExpiration#" CFSQLType="cf_sql_timestamp" />		</cfif>		<cfif structKeyExists(arguments,"isActive") and len(arguments.isActive)>			AND	isActive = <cfqueryparam value="#arguments.isActive#" CFSQLType="cf_sql_bit" />		</cfif>		<cfif structKeyExists(arguments,"programID") and len(arguments.programID)>			AND	programID = <cfqueryparam value="#arguments.programID#" CFSQLType="cf_sql_integer" />		</cfif>		<cfif structKeyExists(arguments,"categoryID") and len(arguments.categoryID)>			AND	categoryID = <cfqueryparam value="#arguments.categoryID#" CFSQLType="cf_sql_integer" />		</cfif>		<cfif structKeyExists(arguments,"implementingPartner") and len(arguments.implementingPartner)>			AND	implementingPartner = <cfqueryparam value="#arguments.implementingPartner#" CFSQLType="cf_sql_integer" />		</cfif>		<cfif structKeyExists(arguments, "orderby") and len(arguments.orderBy)>			ORDER BY #arguments.orderby#		</cfif>		</cfquery>				<cfreturn qList />	</cffunction>	<cffunction name="getByAttributes" access="public" output="false" returntype="array">		<cfargument name="SysUserID" type="numeric" required="false" />		<cfargument name="Name" type="string" required="false" />		<cfargument name="Description" type="string" required="false" />		<cfargument name="Email" type="string" required="false" />		<cfargument name="Password" type="string" required="false" />		<cfargument name="activationGUID" type="string" required="false" />		<cfargument name="activationExpiration" type="date" required="false" />		<cfargument name="isActive" type="boolean" required="false" default="true" />		<cfargument name="programID" type="numeric" required="false" />		<cfargument name="categoryID" type="numeric" required="false" />		<cfargument name="implementingPartner" type="numeric" required="false" />		<cfargument name="orderby" type="string" required="false" />				<cfset var qList = getByAttributesQuery(argumentCollection=arguments) />				<cfset var arrObjects = arrayNew(1) />		<cfset var tmpObj = "" />		<cfset var i = 0 />		<cfloop from="1" to="#qList.recordCount#" index="i">			<cfset tmpObj = createObject("component","User").init(argumentCollection=queryRowToStruct(qList,i)) />			<cfset arrayAppend(arrObjects,tmpObj) />		</cfloop>						<cfreturn arrObjects />	</cffunction>	<cffunction name="queryRowToStruct" access="private" output="false" returntype="struct">		<cfargument name="qry" type="query" required="true">				<cfscript>			/**			 * Makes a row of a query into a structure.			 * 			 * @param query 	 The query to work with. 			 * @param row 	 Row number to check. Defaults to row 1. 			 * @return Returns a structure. 			 * @author Nathan Dintenfass (nathan@changemedia.com) 			 * @version 1, December 11, 2001 			 */			//by default, do this to the first row of the query			var row = 1;			//a var for looping			var ii = 1;			//the cols to loop over			var cols = listToArray(qry.columnList);			//the struct to return			var stReturn = structnew();			//if there is a second argument, use that for the row number			if(arrayLen(arguments) GT 1)				row = arguments[2];			//loop over the cols and build the struct from the query row			for(ii = 1; ii lte arraylen(cols); ii = ii + 1){				stReturn[cols[ii]] = qry[cols[ii]][row];			}					//return the struct			return stReturn;		</cfscript>	</cffunction>	<cffunction name="getAllUsers" access="public" output="false" returntype="Query"> 				<cfset var qUsers = "">				<cfquery name="qUsers" datasource="#dsn.getName()#">			SELECT SysUserID,				Name,				Description,				Email,				isActive,				Password,				activationGUID,				activationExpiration,				programid,				(select name from program where programid=sysuser.programid) as program			FROM	SysUser			ORDER BY Name		</cfquery>			  <cfreturn qUsers>	</cffunction>	<cffunction name="checkEmail" access="public" output="false" returntype="numeric">		<cfargument name="Email" type="string" required="false" />				<cfset var qListcount = 0 />				<cfquery name="qList" datasource="#dsn.getName()#">			SELECT SysUserID FROM	SysUser WHERE	0=0			AND	Email = <cfqueryparam value="#arguments.Email#" CFSQLType="cf_sql_varchar" />		</cfquery>		<cfset var qlistcount=qlist.recordcount>		<cfreturn qlistcount />	</cffunction>	<cffunction name="getSysUserID" access="public" output="false" returntype="numeric">		<cfargument name="Email" type="string" required="false" />		<cfargument name="isActive" type="any" required="false" default="true" />		<cfargument name="Password" type="string" required="false" />				<cfset rtnsysUserID = "" />				<cfquery name="qUser" datasource="#dsn.getName()#">			SELECT SysUserID FROM SysUser WHERE				Email = <cfqueryparam value="#arguments.Email#" CFSQLType="cf_sql_varchar" />			AND	isActive = <cfqueryparam value="#arguments.isActive#" CFSQLType="cf_sql_char" />			AND	Password = <cfqueryparam value="#hash(arguments.Password,"SHA")#" CFSQLType="cf_sql_varchar" />		</cfquery>		<cfif qUser.recordcount is 1>        	<cfset var rtnSysUserID=qUser.sysUserID>		<cfelse>        	<cfset var rtnSysUserID=0>		</cfif>					<cfreturn rtnSysUserID />	</cffunction>	<cffunction name="getSysUserExpires" access="public" output="false" returntype="date">		<cfargument name="sysuserID" type="numeric" required="true" />				<cfset rtnsysUserActivationExpiration = "" />				<cfset var qExp = "" />				<cfquery name="qExp" datasource="#dsn.getName()#">			SELECT ActivationExpiration FROM SysUser WHERE				SysUserID = <cfqueryparam value="#arguments.SysUserID#" CFSQLType="cf_sql_integer" />		</cfquery>		<cfif qExp.recordcount is 1>        	<cfset var rtnsysUserActivationExpiration=qExp.ActivationExpiration>		<cfelse>        	<cfset var rtnsysUserActivationExpiration='1/1/1900'>		</cfif>					<cfreturn rtnsysUserActivationExpiration />	</cffunction>	<cffunction name="getSysUserNumberOfLogons" access="public" output="false" returntype="numeric">		<cfargument name="sysuserID" type="numeric" required="true" />				<cfset rtnsysUserNumberLogons = "" />				<cfset var qNum = "" />				<cfquery name="qNum" datasource="#dsn.getName()#">			SELECT count(sysuserid) as numlogon FROM activityStatusLog WHERE				SysUserID = <cfqueryparam value="#arguments.SysUserID#" CFSQLType="cf_sql_integer" />			and lognote like 'logged on%'		</cfquery>					<cfset rtnsysUserNumberLogons = qnum.numlogon>					<cfreturn rtnsysUserNumberLogons />	</cffunction>	<cffunction name="checkOwnedProjectsNoBudget" access="public" output="false" returntype="numeric">		<cfargument name="sysuserID" type="string" required="true"> 				<cfquery name="ProjQ" datasource="#dsn.getName()#">					select count(activityid) as nobudgetprojects from vw_fullactivities			where isactive = 1			and (activityid in (select activityid from activitystatuslog where sysuserid = <cfqueryparam value="#arguments.sysuserID#" CFSQLType="cf_sql_integer" /> and (lognote = 'proposal submitted for review' or lognote='proposal submitted for regional review' or lognote='proposal submitted with no approval required' or lognote='proposal submitted with no pre-legal review required'))				or activityid in (select activityid from activityperson where email = '#GetAuthUser()#'))			and projectamount = 0  and activitystatusid not in (266,267,273,274) and proposalsubmitdate is not null and DATEADD(MONTH, 2, proposalsubmitdate) < GetDate()		</cfquery>					<cfset rtnNumProj = ProjQ.nobudgetprojects>		<cfreturn rtnNumProj  />	</cffunction>			<cffunction name="getSysUserSubmittedProposals" access="public" output="false" returntype="String">		<cfargument name="sysuserID" type="numeric" required="true" />				<cfset rtnsysUserSubmittedProposals = "" />				<cfset var qNum = "" />				<cfquery name="qNum" datasource="#dsn.getName()#">			SELECT distinct activityid FROM activityStatusLog WHERE				SysUserID = <cfqueryparam value="#arguments.SysUserID#" CFSQLType="cf_sql_integer" />			and (lognote = 'proposal submitted for review' or lognote = 'proposal submitted for regional review')				order by activityid		</cfquery>					<cfset rtnsysUserSubmittedProposals = valuelist(qNum.activityid)>					<cfreturn rtnsysUserSubmittedProposals />	</cffunction>										</cfcomponent>
