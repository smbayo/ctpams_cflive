<cfcomponent displayname="User" output="false">		<cfproperty name="SysUserID" type="numeric" default="" />		<cfproperty name="Name" type="string" default="" />		<cfproperty name="Description" type="string" default="" />		<cfproperty name="Email" type="string" default="" />		<cfproperty name="Password" type="string" default="" />		<cfproperty name="Confirm" type="string" default="" />		<cfproperty name="activationGUID" type="string" default="" />		<cfproperty name="activationExpiration" type="date" default="" />		<cfproperty name="isActive" type="boolean" default="true" />		<cfproperty name="programID" type="numeric" default="" />		<cfproperty name="categoryID" type="numeric" default="" />		<cfproperty name="implementingPartner" type="numeric" default="" />			<!---	PROPERTIES	--->	<cfset variables.instance = StructNew() />	<!---	INITIALIZATION / CONFIGURATION	--->	<cffunction name="init" access="public" returntype="User" output="false">		<cfargument name="SysUserID" type="string" required="false" default="" />		<cfargument name="Name" type="string" required="false" default="" />		<cfargument name="Description" type="string" required="false" default="" />		<cfargument name="Email" type="string" required="false" default="" />		<cfargument name="Password" type="string" required="false" default="" />		<cfargument name="Confirm" type="string" required="false" default="" />			<cfargument name="activationGUID" type="string" required="false" default="" />		<cfargument name="activationExpiration" type="string" required="false" default="" />		<cfargument name="isActive" type="string" required="false" default="" />		<cfargument name="programID" type="string" required="false" default="" />		<cfargument name="categoryID" type="string" required="false" default="" />		<cfargument name="implementingPartner" type="string" required="false" default="" />				<!--- run setters --->		<cfset setSysUserID(arguments.SysUserID) />		<cfset setName(arguments.Name) />		<cfset setDescription(arguments.Description) />		<cfset setEmail(arguments.Email) />		<cfset setPassword(arguments.Password) />		<cfset setConfirm(arguments.Confirm) />			<cfset setactivationGUID(arguments.activationGUID) />		<cfset setactivationExpiration(arguments.activationExpiration) />		<cfset setisActive(arguments.isActive) />		<cfset setprogramID(arguments.programID) />		<cfset setcategoryID(arguments.categoryID) />		<cfset setimplementingPartner(arguments.implementingPartner) />				<cfreturn this /> 	</cffunction>	<!---	PUBLIC FUNCTIONS	--->	<cffunction name="setMemento" access="public" returntype="User" output="false">		<cfargument name="memento" type="struct" required="yes"/>		<cfset variables.instance = arguments.memento />		<cfreturn this />	</cffunction>	<cffunction name="getMemento" access="public" returntype="struct" output="false" >		<cfreturn variables.instance />	</cffunction>	<cffunction name="validate" access="public" returntype="array" output="false">		<cfset var errors = arrayNew(1) />		<cfset var thisError = structNew() />				<!--- SysUserID --->		<cfif (len(trim(getSysUserID())) AND NOT isNumeric(trim(getSysUserID())))>			<cfset thisError.field = "SysUserID" />			<cfset thisError.type = "invalidType" />			<cfset thisError.message = "SysUserID is not numeric" />			<cfset arrayAppend(errors,duplicate(thisError)) />		</cfif>				<!--- Name --->		<cfif (NOT len(trim(getName())))>			<cfset thisError.field = "Name" />			<cfset thisError.type = "required" />			<cfset thisError.message = "Name is required" />			<cfset arrayAppend(errors,duplicate(thisError)) />		</cfif>		<cfif (len(trim(getName())) AND NOT IsSimpleValue(trim(getName())))>			<cfset thisError.field = "Name" />			<cfset thisError.type = "invalidType" />			<cfset thisError.message = "Name is not a string" />			<cfset arrayAppend(errors,duplicate(thisError)) />		</cfif>		<cfif (len(trim(getName())) GT 100)>			<cfset thisError.field = "Name" />			<cfset thisError.type = "tooLong" />			<cfset thisError.message = "Name is too long" />			<cfset arrayAppend(errors,duplicate(thisError)) />		</cfif>				<!--- Description --->		<cfif (NOT len(trim(getDescription())))>			<cfset thisError.field = "Description" />			<cfset thisError.type = "required" />			<cfset thisError.message = "Description is required" />			<cfset arrayAppend(errors,duplicate(thisError)) />		</cfif>		<cfif (len(trim(getDescription())) AND NOT IsSimpleValue(trim(getDescription())))>			<cfset thisError.field = "Description" />			<cfset thisError.type = "invalidType" />			<cfset thisError.message = "Description is not a string" />			<cfset arrayAppend(errors,duplicate(thisError)) />		</cfif>		<cfif (len(trim(getDescription())) GT 255)>			<cfset thisError.field = "Description" />			<cfset thisError.type = "tooLong" />			<cfset thisError.message = "Description is too long" />			<cfset arrayAppend(errors,duplicate(thisError)) />		</cfif>				<!--- Email --->		<cfif (NOT len(trim(getEmail())))>			<cfset thisError.field = "Email" />			<cfset thisError.type = "required" />			<cfset thisError.message = "Email is required" />			<cfset arrayAppend(errors,duplicate(thisError)) />		</cfif>		<cfif (len(trim(getEmail())) AND NOT IsSimpleValue(trim(getEmail())))>			<cfset thisError.field = "Email" />			<cfset thisError.type = "invalidType" />			<cfset thisError.message = "Email is not a string" />			<cfset arrayAppend(errors,duplicate(thisError)) />		</cfif>		<cfif (len(trim(getEmail())) GT 100)>			<cfset thisError.field = "Email" />			<cfset thisError.type = "tooLong" />			<cfset thisError.message = "Email is too long" />			<cfset arrayAppend(errors,duplicate(thisError)) />		</cfif>				<!--- isActivexx --->		<!--- <cfif (len(trim(getisActivexx())) AND NOT IsSimpleValue(trim(getisActivexx())))>			<cfset thisError.field = "isActivexx" />			<cfset thisError.type = "invalidType" />			<cfset thisError.message = "isActivexx is not a string" />			<cfset arrayAppend(errors,duplicate(thisError)) />		</cfif>		<cfif (len(trim(getisActivexx())) GT 1)>			<cfset thisError.field = "isActivexx" />			<cfset thisError.type = "tooLong" />			<cfset thisError.message = "isActivexx is too long" />			<cfset arrayAppend(errors,duplicate(thisError)) />		</cfif> --->				<!--- Password --->		<cfif (NOT len(trim(getPassword())))>			<cfset thisError.field = "Password" />			<cfset thisError.type = "required" />			<cfset thisError.message = "Password is required" />			<cfset arrayAppend(errors,duplicate(thisError)) />		</cfif>					<!--- <cfif ( len(trim(getSysUserID())) AND isNumeric(trim(getSysUserID())) AND getSysUserID() GT 0 ) >					<cfelse> --->			<cfif ( len(trim(getPassword())) AND NOT len(trim(getConfirm())))>				<cfset thisError.field = "Confirm" />				<cfset thisError.type = "required" />				<cfset thisError.message = "Confirm password is required" />				<cfset arrayAppend(errors,duplicate(thisError)) />			</cfif>			<!--- </cfif> --->					<cfif len(trim(getPassword())) AND len(trim(getConfirm())) >		 	<cfif getPassword() NEQ getConfirm()>				<cfset thisError.field = "Password" />				<cfset thisError.type = "No Match" />				<cfset thisError.message = "Password does not match" />				<cfset arrayAppend(errors,duplicate(thisError)) />			<cfelseif len(getPassword()) is not 40 and refind("^.*(?=.{8,})(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).*$", "#getPassword()#") is 0>				<cfset thisError.field = "Password" />				<cfset thisError.type = "Complexity" />				<cfset thisError.message = "Password does not meet complexity requirements (8 digits with at least 1 number and 1 capital letter)" />				<cfset arrayAppend(errors,duplicate(thisError)) />			</cfif>		</cfif>				<!--- 	<cfif (len(trim(getPassword())) AND refind("^.*(?=.{8,})(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).*$", "#getPassword()#") is 0)>				<cfset thisError.field = "Password" />				<cfset thisError.type = "Complexity" />				<cfset thisError.message = "Password does not meet complexity requirements (8 digits with at least 1 number and 1 capital letter)" />				<cfset arrayAppend(errors,duplicate(thisError)) />		</cfif> --->						<!---		<cfif (len(trim(getPassword())) AND NOT IsSimpleValue(trim(getPassword())))>			<cfset thisError.field = "Password" />			<cfset thisError.type = "invalidType" />			<cfset thisError.message = "Password is not a string" />			<cfset arrayAppend(errors,duplicate(thisError)) />		</cfif>		<cfif (len(trim(getPassword())) GT 50)>			<cfset thisError.field = "Password" />			<cfset thisError.type = "tooLong" />			<cfset thisError.message = "Password is too long" />			<cfset arrayAppend(errors,duplicate(thisError)) />		</cfif>		 --->				<!--- activationGUID --->		<cfif (len(trim(getactivationGUID())) AND NOT IsSimpleValue(trim(getactivationGUID())))>			<cfset thisError.field = "activationGUID" />			<cfset thisError.type = "invalidType" />			<cfset thisError.message = "activationGUID is not a string" />			<cfset arrayAppend(errors,duplicate(thisError)) />		</cfif>		<cfif (len(trim(getactivationGUID())) GT 0)>			<cfset thisError.field = "activationGUID" />			<cfset thisError.type = "tooLong" />			<cfset thisError.message = "activationGUID is too long" />			<cfset arrayAppend(errors,duplicate(thisError)) />		</cfif>				<!--- activationExpiration --->		<cfif (len(trim(getactivationExpiration())) AND NOT isDate(trim(getactivationExpiration())))>			<cfset thisError.field = "activationExpiration" />			<cfset thisError.type = "invalidType" />			<cfset thisError.message = "activationExpiration is not a date" />			<cfset arrayAppend(errors,duplicate(thisError)) />		</cfif>				<!--- isActive --->		<cfif (len(trim(getisActive())) AND NOT isBoolean(trim(getisActive())))>			<cfset thisError.field = "isActive" />			<cfset thisError.type = "invalidType" />			<cfset thisError.message = "isActive is not boolean" />			<cfset arrayAppend(errors,duplicate(thisError)) />		</cfif>				<!--- programID --->		<cfif (len(trim(getprogramID())) AND NOT isNumeric(trim(getprogramID())))>			<cfset thisError.field = "programID" />			<cfset thisError.type = "invalidType" />			<cfset thisError.message = "programID is not numeric" />			<cfset arrayAppend(errors,duplicate(thisError)) />		</cfif>				<cfreturn errors />	</cffunction>	<!---	ACCESSORS	--->	<cffunction name="setSysUserID" access="public" returntype="void" output="false">		<cfargument name="SysUserID" type="string" required="true" />		<cfset variables.instance.SysUserID = arguments.SysUserID />	</cffunction>	<cffunction name="getSysUserID" access="public" returntype="string" output="false">		<cfreturn variables.instance.SysUserID />	</cffunction>	<cffunction name="setName" access="public" returntype="void" output="false">		<cfargument name="Name" type="string" required="true" />		<cfset variables.instance.Name = arguments.Name />	</cffunction>	<cffunction name="getName" access="public" returntype="string" output="false">		<cfreturn variables.instance.Name />	</cffunction>	<cffunction name="setDescription" access="public" returntype="void" output="false">		<cfargument name="Description" type="string" required="true" />		<cfset variables.instance.Description = arguments.Description />	</cffunction>	<cffunction name="getDescription" access="public" returntype="string" output="false">		<cfreturn variables.instance.Description />	</cffunction>	<cffunction name="setEmail" access="public" returntype="void" output="false">		<cfargument name="Email" type="string" required="true" />		<cfset variables.instance.Email = arguments.Email />	</cffunction>	<cffunction name="getEmail" access="public" returntype="string" output="false">		<cfreturn variables.instance.Email />	</cffunction>	<cffunction name="setPassword" access="public" returntype="void" output="false">		<cfargument name="Password" type="string" required="true" />		<cfset variables.instance.Password = arguments.Password />	</cffunction>	<cffunction name="getPassword" access="public" returntype="string" output="false">		<cfreturn variables.instance.Password />	</cffunction>	<cffunction name="setConfirm" access="public" returntype="void" output="false">		<cfargument name="Confirm" type="string" required="true" />		<cfset variables.instance.Confirm = arguments.Confirm />	</cffunction>	<cffunction name="getConfirm" access="public" returntype="string" output="false">		<cfreturn variables.instance.Confirm />	</cffunction>				<cffunction name="setactivationGUID" access="public" returntype="void" output="false">		<cfargument name="activationGUID" type="string" required="true" />		<cfset variables.instance.activationGUID = arguments.activationGUID />	</cffunction>	<cffunction name="getactivationGUID" access="public" returntype="string" output="false">		<cfreturn variables.instance.activationGUID />	</cffunction>	<cffunction name="setactivationExpiration" access="public" returntype="void" output="false">		<cfargument name="activationExpiration" type="string" required="true" />		<cfset variables.instance.activationExpiration = arguments.activationExpiration />	</cffunction>	<cffunction name="getactivationExpiration" access="public" returntype="string" output="false">		<cfreturn variables.instance.activationExpiration />	</cffunction>	<cffunction name="setisActive" access="public" returntype="void" output="false">		<cfargument name="isActive" type="string" required="true" />		<cfset variables.instance.isActive = arguments.isActive />	</cffunction>	<cffunction name="getisActive" access="public" returntype="string" output="false">		<cfreturn variables.instance.isActive />	</cffunction>	<cffunction name="setprogramID" access="public" returntype="void" output="false">		<cfargument name="programID" type="string" required="true" />		<cfset variables.instance.programID = arguments.programID />	</cffunction>	<cffunction name="getprogramID" access="public" returntype="string" output="false">		<cfreturn variables.instance.programID />	</cffunction>			<cffunction name="setcategoryID" access="public" returntype="void" output="false">		<cfargument name="categoryID" type="string" required="true" />		<cfset variables.instance.categoryID = arguments.categoryID />	</cffunction>	<cffunction name="getcategoryID" access="public" returntype="string" output="false">		<cfreturn variables.instance.categoryID />	</cffunction>		<cffunction name="setimplementingPartner" access="public" returntype="void" output="false">		<cfargument name="implementingPartner" type="string" required="true" />		<cfset variables.instance.implementingPartner = arguments.implementingPartner />	</cffunction>	<cffunction name="getimplementingPartner" access="public" returntype="string" output="false">		<cfreturn variables.instance.implementingPartner />	</cffunction>	<!---	DUMP	--->	<cffunction name="dump" access="public" output="true" return="void">		<cfargument name="abort" type="boolean" default="false" />		<cfdump var="#variables.instance#" />		<cfif arguments.abort>			<cfabort />		</cfif>	</cffunction></cfcomponent>
