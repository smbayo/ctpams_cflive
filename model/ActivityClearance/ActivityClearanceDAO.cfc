<cfcomponent displayname="ActivityClearanceDAO" hint="table ID column = ActivityClearanceID">	<cfproperty name="dsn" inject="coldbox:datasource:theDSN" />			<cffunction name="init" access="public" output="false" returntype="ActivityClearanceDAO">		<cfreturn this>	</cffunction>		<cffunction name="create" access="public" output="false" returntype="boolean">		<cfargument name="ActivityClearance" type="ActivityClearance" required="true" />		<cfset var qCreate = "" />		<cftry>			<cfquery name="qCreate" datasource="#dsn.getName()#">				INSERT INTO ActivityClearance					(					ActivityID,					ActivityStatusID,					ClearanceStatus,					ClearanceAgencyName,					Comments,					cstatusDate,					ClearanceType,					sysUserID					)				VALUES					(					<cfqueryparam value="#arguments.ActivityClearance.getActivityID()#" CFSQLType="cf_sql_integer" />,					<cfqueryparam value="#arguments.ActivityClearance.getActivityStatusID()#" CFSQLType="cf_sql_integer" null="#not len(arguments.ActivityClearance.getActivityStatusID())#" />,					<cfqueryparam value="#arguments.ActivityClearance.getClearanceStatus()#" CFSQLType="cf_sql_varchar" null="#not len(arguments.ActivityClearance.getClearanceStatus())#" />,					<cfqueryparam value="#arguments.ActivityClearance.getClearanceAgencyName()#" CFSQLType="cf_sql_varchar" null="#not len(arguments.ActivityClearance.getClearanceAgencyName())#" />,					<cfqueryparam value="#arguments.ActivityClearance.getComments()#" CFSQLType="cf_sql_varchar" null="#not len(arguments.ActivityClearance.getComments())#" />,					<cfqueryparam value="#arguments.ActivityClearance.getcstatusDate()#" CFSQLType="cf_sql_timestamp" null="#not len(arguments.ActivityClearance.getcstatusDate())#" />,					<cfqueryparam value="#arguments.ActivityClearance.getClearanceType()#" CFSQLType="cf_sql_varchar" null="#not len(arguments.ActivityClearance.getClearanceType())#" />,					<cfqueryparam value="#arguments.ActivityClearance.getsysUserID()#" CFSQLType="cf_sql_integer" null="#not len(arguments.ActivityClearance.getsysUserID())#" />					)			</cfquery>			<cfcatch type="database">				<cfreturn false />			</cfcatch>		</cftry>		<cfreturn true />	</cffunction>	<cffunction name="read" access="public" output="false" returntype="void">		<cfargument name="ActivityClearance" type="ActivityClearance" required="true" />
		<cfset var qRead = "" />		<cfset var strReturn = structNew() />		<cftry>			<cfquery name="qRead" datasource="#dsn.getName()#">				SELECT					ActivityClearanceID,					ActivityID,					ActivityStatusID,					ClearanceStatus,					ClearanceAgencyName,					Comments,					cstatusDate,					ClearanceType,					sysUserID				FROM	ActivityClearance				WHERE	ActivityClearanceID = <cfqueryparam value="#arguments.ActivityClearance.getActivityClearanceID()#" CFSQLType="cf_sql_integer" />			</cfquery>			<cfcatch type="database">				<!--- leave the bean as is and set an empty query for the conditional logic below --->				<cfset qRead = queryNew("id") />			</cfcatch>		</cftry>		<cfif qRead.recordCount>			<cfset strReturn = queryRowToStruct(qRead)>			<cfset arguments.ActivityClearance.init(argumentCollection=strReturn)>		</cfif>	</cffunction>	<cffunction name="update" access="public" output="false" returntype="boolean">		<cfargument name="ActivityClearance" type="ActivityClearance" required="true" />		<cfset var qUpdate = "" />		<!--- <cftry> --->			<cfquery name="qUpdate" datasource="#dsn.getName()#">				UPDATE	ActivityClearance				SET					ActivityID = <cfqueryparam value="#arguments.ActivityClearance.getActivityID()#" CFSQLType="cf_sql_integer" />,					ActivityStatusID = <cfqueryparam value="#arguments.ActivityClearance.getActivityStatusID()#" CFSQLType="cf_sql_integer" null="#not len(arguments.ActivityClearance.getActivityStatusID())#" />,					ClearanceStatus = <cfqueryparam value="#arguments.ActivityClearance.getClearanceStatus()#" CFSQLType="cf_sql_varchar" null="#not len(arguments.ActivityClearance.getClearanceStatus())#" />,					ClearanceAgencyName = <cfqueryparam value="#arguments.ActivityClearance.getClearanceAgencyName()#" CFSQLType="cf_sql_varchar" null="#not len(arguments.ActivityClearance.getClearanceAgencyName())#" />,					Comments = <cfqueryparam value="#arguments.ActivityClearance.getComments()#" CFSQLType="cf_sql_varchar" null="#not len(arguments.ActivityClearance.getComments())#" />,					cstatusDate = <cfqueryparam value="#arguments.ActivityClearance.getcstatusDate()#" CFSQLType="cf_sql_timestamp" null="#not len(arguments.ActivityClearance.getcstatusDate())#" />,					ClearanceType = <cfqueryparam value="#arguments.ActivityClearance.getClearanceType()#" CFSQLType="cf_sql_varchar" null="#not len(arguments.ActivityClearance.getClearanceType())#" />,					sysUserID = <cfqueryparam value="#arguments.ActivityClearance.getsysUserID()#" CFSQLType="cf_sql_integer" null="#not len(arguments.ActivityClearance.getsysUserID())#" />				WHERE	ActivityClearanceID = <cfqueryparam value="#arguments.ActivityClearance.getActivityClearanceID()#" CFSQLType="cf_sql_integer" />			</cfquery>			<!--- <cfcatch type="database">				<cfreturn false />			</cfcatch>		</cftry> --->		<cfreturn true />	</cffunction>	<cffunction name="delete" access="public" output="false" returntype="boolean">		<cfargument name="ActivityClearance" type="ActivityClearance" required="true" />		<cfset var qDelete = "">		<!--- <cftry> --->			<cfquery name="qDelete" datasource="#dsn.getName()#">				DELETE FROM	ActivityClearance 				WHERE	ActivityClearanceID = <cfqueryparam value="#arguments.ActivityClearance.getActivityClearanceID()#" CFSQLType="cf_sql_integer" />			</cfquery>			<!--- <cfcatch type="database">				<cfreturn false />			</cfcatch>		</cftry> --->		<cfreturn true />	</cffunction>	<cffunction name="exists" access="public" output="false" returntype="boolean">		<cfargument name="ActivityClearance" type="ActivityClearance" required="true" />		<cfset var qExists = "">		<cfif len(arguments.ActivityClearance.getActivityClearanceID())>			<cfquery name="qExists" datasource="#dsn.getName()#" maxrows="1">				SELECT count(1) as idexists				FROM	ActivityClearance				WHERE	ActivityClearanceID = <cfqueryparam value="#arguments.ActivityClearance.getActivityClearanceID()#" CFSQLType="cf_sql_integer" />			</cfquery>				<cfif qExists.idexists>				<cfreturn true />			<cfelse>				<cfreturn false />			</cfif>		<cfelse>			<cfreturn false />		</cfif>	</cffunction>	<cffunction name="save" access="public" output="false" returntype="boolean">		<cfargument name="ActivityClearance" type="ActivityClearance" required="true" />
		<cfset var success = false />		<cfif exists(arguments.ActivityClearance)>			<cfset success = update(arguments.ActivityClearance) />		<cfelse>			<cfset success = create(arguments.ActivityClearance) />		</cfif>				<cfreturn success />	</cffunction>	<cffunction name="queryRowToStruct" access="private" output="false" returntype="struct">		<cfargument name="qry" type="query" required="true">				<cfscript>			/**			 * Makes a row of a query into a structure.			 * 			 * @param query 	 The query to work with. 			 * @param row 	 Row number to check. Defaults to row 1. 			 * @return Returns a structure. 			 * @author Nathan Dintenfass (nathan@changemedia.com) 			 * @version 1, December 11, 2001 			 */			//by default, do this to the first row of the query			var row = 1;			//a var for looping			var ii = 1;			//the cols to loop over			var cols = listToArray(qry.columnList);			//the struct to return			var stReturn = structnew();			//if there is a second argument, use that for the row number			if(arrayLen(arguments) GT 1)				row = arguments[2];			//loop over the cols and build the struct from the query row			for(ii = 1; ii lte arraylen(cols); ii = ii + 1){				stReturn[cols[ii]] = qry[cols[ii]][row];			}					//return the struct			return stReturn;		</cfscript>	</cffunction></cfcomponent>
